Name: RandomConvergentConnect - Randomly connect a population of nodes to a target node.
Synopsis:
[sources] target n                              RandomConvergentConnect -> -
[sources] target n                    /synmodel RandomConvergentConnect -> -
[sources] target n init_dict                    RandomConvergentConnect -> -
[sources] target n init_dict          /synmodel RandomConvergentConnect -> -
[sources] target n [weights] [delays]           RandomConvergentConnect -> -
[sources] target n [weights] [delays] /synmodel RandomConvergentConnect -> -
[sources] [targets] [ns] [weightss] [delayss] /synmodel RandomConvergentConnect -> -
[sources] [targets] n /synmodel RandomConvergentConnect -> -

Parameters:
[sources]   - array of (global IDs of) potential source nodes
target      - GID of target node
[targets]   - array of (global IDs of) target nodes
source_from - first index in range 
source_to   - last index in range
n           - number of connections to be established
init_dict   - dictionary used to initialize each of the established connections
weights     - A list of weights of size n
delays      - A list of delays of size n
weightss    - A list of lists of weights of size length(targets) x size n
delayss     - A list of lists delays of size length(targets) x size n 
/synmodel   - The synapse model for the connection (see Options below)

Options:
allow_autapses  - controls, whether self connections can be produced.
allow_multapses - controls, whether multiple selections are possible.

If not given, the synapse model is taken from the syn_spec dictionary
from the Options of the Connect command.

Description:
This function connects a given target node with a random collection of
n randomly chosen source nodes from the specified array. The sources
are chosen with uniform probability.  Whether multiple synapses are
allowed can be set via the option allow_multapses. Self connections
are controlled by the option allow_autapses.

In the second synopsis, init_dict is a dictionary supplied by the user
to initialize each synapses' parameters. init_dict must contain a
function called /InitSynapse, which is called by
RandomConvergentConnect before each call to Connect. /InitSynapse
expects as argument on the stack the number i (between 0 and n-1) of
the connection currently to be established.  A typical implementation
of init_dict, which for each connection sets the value for weight and
delay (stored in arrays in init_dict) of the synapse is given below:

     init_dict <<
	 /weights [0.3 2.2 0.1 -0.2 ...] % array of length n
	 /delays [1.2 1.3 1.0 1.5 ...]   % array of length n

	 /InitSynapse
	 {
	     /i Set

	     <<
		 /weight weights i get
		 /delay delays i get
	     >> SetDefaults % sets these parameters for the following call to Connect
	 }
     >> def

 In the third synopsis, an array of weights and delays of length n each are supplied. The first connection will get weights[0], delays[0], the second weights[1], delays[1] and so on.

Author: Tobias Potjans, Moritz Helias
SeeAlso: Connect, ConvergentConnect, DivergentConnect, RandomDivergentConnect
 Source: /home/ubuntu/nest_server_codes/nest-2.8.0/lib/sli/nest-init.sli
